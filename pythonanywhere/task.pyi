from typing import List, Optional

from typing_extensions import Literal

from pythonanywhere.schedule_api import Schedule

# from pythonanywhere.task import Task

class Task:
    command: Optional[str] = ...
    hour: Optional[int] = ...
    minute: Optional[int] = ...
    interval: Optional[Literal["daily", "hourly"]] = ...
    enabled: Optional[bool] = ...
    task_id: Optional[int] = ...
    can_enable: Optional[bool] = ...
    expiry: Optional[str] = ...
    extend_url: Optional[str] = ...
    logfile: Optional[str] = ...
    printable_time: Optional[str] = ...
    url: Optional[str] = ...
    user: Optional[str] = ...
    schedule: Schedule = ...
    def __init__(
        self, *, command=None, hour=None, minute=None, disabled=None, task_id=None
    ) -> None: ...
    def __repr__(self) -> str: ...
    def from_id(cls: Task, task_id: int) -> Task: ...
    def to_be_created(
        cls: Task, *, command: str, minute: int, hour: Optional[int] = None, disabled: bool,
    ) -> Task: ...
    def from_specs(cls: Task, specs: dict) -> Task: ...
    def create_schedule(self) -> None: ...
    def delete_schedule(self) -> None: ...
    def update_specs(self, specs: dict) -> None: ...
    def update_schedule(self, params: dict, *, porcelain: bool = False) -> None: ...

class TaskList:
    tasks = List[Task]
    def __init__(self) -> None: ...
